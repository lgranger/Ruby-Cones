= New Ruby Cones

The Ruby Cones are small lessons in Ruby and TDD, structured as traffic cones that mark
challenges on the road to Ruby Victory. Cones teach us about Ruby language,
syntax, structure, and some common functions and libraries.
We also teach you TDD basing the cones on RGF.
Testing is not just something we pay lip service to, but something we
live.  Testing is essential in your quest to learn and do great things in Ruby.

== The Structure

The cones are broken out into areas by file, hashes are covered in +about_hashes.rb+,
modules are introduced in +about_modules.rb+, <em>etc</em>.  They are presented in
order in the +road_to_victory.rb+ file.

Each cone builds up your knowledge of Ruby and builds upon itself. It will stop at
the first place you need to correct.

Some cones simply need to have the correct answer substituted for an incorrect one.
Some, however, require you to supply your own answer.  If you see the method +__+ (a
double underscore) listed, it is a hint to you to supply your own code in order to
make it work correctly.

== Installing Ruby

If you do not have Ruby setup, please visit http://ruby-lang.org/en/downloads/ for
operating specific instructions.  In order to run the cones you need +ruby+ and
+rake+ installed. To check your installations simply type:

*nix platforms from any terminal window:

   [~] $ ruby --version
   [~] $ rake --version

Windows from the command prompt (+cmd.exe+)

   c:\ruby --version
   c:\rake --version

If you don't have +rake+ installed, just run <code>gem install rake</code>

Any response for Ruby with a version number greater than 1.8 is fine (should be
around 1.8.6 or more). Any version of +rake+ will do.

== Generating the Cones

A fresh checkout will not include the cones, you will need to generate
them.

    [ruby_cones] $ rake gen                       # generates the cones directory

If you need to regenerate the cones, thus wiping your current `cones`,

    [ruby_cones] $ rake regen                     # regenerates the cones directory, wiping the original

== The Path To Enlightenment

You can run the tests through +rake+ or by calling the file itself (+rake+ is the
recommended way to run them as we might build more functionality into this task).

*nix platforms, from the +ruby_cones+ directory

    [ruby_cones] $ rake                           # runs the default target :walk_the_path
    [ruby_cones] $ ruby path_to_enlightenment.rb  # simply call the file directly

Windows is the same thing

    c:\ruby_cones\rake                             # runs the default target :walk_the_path
    c:\ruby_cones\ruby path_to_enlightenment.rb    # simply call the file directly

=== RGF: Red, Green, Refactor

In test-driven development (TDD) the mantra has always been <em>red, green, refactor</em>.
Write a failing test and run it (<em>red</em>), make the test pass (<em>green</em>),
then look at the code and consider if you can make it any better (<em>refactor</em>).

While traveling the road to Ruby Vicotry you will need to run the cone and
see it fail (<em>red</em>), make the test pass (<em>green</em>), then take a moment
and reflect upon the test to see what it is teaching you and improve the code to
better communicate its intent (<em>refactor</em>).

The very first time you run the cones you will see the following output:

    [ ruby_cones ] $ rake
    (in /Users/person/dev/ruby_cones)
    /usr/bin/ruby1.8 road_to_victory.rb

    AboutAsserts#test_assert_truth has given you a car problem.

    Mechanic Bob says:
    You're not to the finish line yet!

    Getting that engine running is gonna need...
    <false> is not true.

    Take a look at this part over here:
    ./about_asserts.rb:10:in `test_assert_truth'
    path_to_enlightenment.rb:38:in `each_with_index'
    path_to_enlightenment.rb:38

    "We travel not to escape life, but for life to not escape us"
    your distance down the road [X_________________________________________________] 0/280

You have come to your first stage. Notice it is telling you where to look for
the first solution:

    Take a look at this part over here:
    ./about_asserts.rb:10:in `test_assert_truth'
    road_to_victory.rb:38:in `each_with_index'
    road_to_victory.rb:38

Open the +about_asserts.rb+ file and look at the first test:

  # We'll get this trip started by checking that the engine is good to go, via asserts.
    def test_assert_truth
      assert false                # This should be true
    end

Change the +false+ to +true+ and re-run the test.  After you are
done, think about what you are learning.  In this case, ignore everything except
the method name (+test_assert_truth+) and the parts inside the method (everything
before the +end+).

In this case the goal is for you to see that if you pass a value to the +assert+
method, it will either ensure it is +true+ and continue on, or fail if
the statement is +false+.

=== Running the Cones automatically

<em>This section is optional.</em>

Normally the road to victory looks like this:

    cd ruby_cones
    rake
    # edit
    rake
    # edit
    rake
    # etc

If you prefer, you can keep the cones running in the background so that after you
make a change in your editor, the cones will immediately run again. This will
hopefully keep your focus on learning Ruby instead of on the command line.

Install the Ruby gem (library) called +watchr+ and then ask it to
"watch" the cones for changes:

    cd ruby_cones
    rake
    # decide to run rake automatically from now on as you edit
    gem install watchr
    watchr ./cones/cones.watchr

== Inspiration

Adapted by Lauren Granger from Neo Software Artisans who gave special
thanks to Mike Clark and Ara Howard for their inspiration.  Mike Clark
wrote an excellent blog post about learning Ruby through unit testing.
This sparked an idea that has taken a bit to solidify, that of
bringing new rubyists into the community through testing.
Ara Howard then gave them the idea to base this on Buddhist Koans,
with his ruby quiz entry on Meta Koans. Lauren Granger updated this to
a car trip/travel premise.

NSA also thanked "The Little Lisper" who "taught us all the value of
the short questions/simple answers style of learning."

Mike Clark's post ::  http://www.clarkware.com/cgi/blosxom/2005/03/18
Meta Koans        ::  http://rubyquiz.com/quiz67.html
The Little Lisper ::  http://www.amazon.com/Little-LISPer-Third-Daniel-Friedman/dp/0023397632

== Other Resources

The Ruby Language               ::  http://ruby-lang.org
Try Ruby in your browser        ::  http://tryruby.org

Dave Thomas' introduction to Ruby Programming Ruby (the Pick Axe) ::  http://pragprog.com/titles/ruby/programming-ruby

Brian Marick's fantastic guide for beginners Everyday Scripting with Ruby    ::  http://pragprog.com/titles/bmsft/everyday-scripting-with-ruby

= Other stuff

Author         :: Jim Weirich <jim@neo.org>
Author         :: Joe O'Brien <joe@objo.com>
Issue Tracker  :: http://www.pivotaltracker.com/projects/48111
Requires       :: Ruby 1.8.x or later and Rake (any recent version)

= License

http://i.creativecommons.org/l/by-nc-sa/3.0/88x31.png

RubyKoans is released under a Creative Commons,
Attribution-NonCommercial-ShareAlike, Version 3.0
(http://creativecommons.org/licenses/by-nc-sa/3.0/) License.
